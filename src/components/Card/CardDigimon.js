import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { useMask } from "@hooks/useMask";
import { useParticles } from "@hooks/useParticles";
import { fieldGradients } from "@constants/fieldGradiants";
export const CardDigimon = ({ id, name, descriptions, fields, levels, types, attributes, image }) => {
    const src = image ?? "https://digi-api.com/images/digimon/w/Hi-Commandramon.png";
    const text = ["00100", "11000", "10101", "10011"];
    const canvasRef = useMask({ src });
    const canvasParticlesRef = useParticles({ text });
    const fieldSelectedGradiant = fieldGradients[fields?.[0]?.id || 1];
    const isMini = descriptions === undefined;
    return (_jsxs("div", { className: `bg-white overflow-hidden ${isMini ? "w-[15rem]" : "w-[20rem]"} rounded-xl font-bold`, children: [_jsx("div", { className: `${isMini ? "w-[15rem] h-[18rem]" : "w-[20rem] h-[22rem]"} border-white border-[1rem] [clip-path:polygon(0%_0%,100%_0%,100%_89%,87%_100%,100%_100%,14%_100%,0%_90%,0%_5%)]`, children: _jsxs("div", { className: `relative bg-gradient-to-r h-full pt-2 ${fieldSelectedGradiant}`, children: [_jsx("div", { class: "absolute z-20 bg-[radial-gradient(circle,_#1D496C_40%,_rgba(0,0,0))] border-white border-2 -mt-4 -ml-2 w-[3rem] h-[3rem] rounded-full flex justify-center items-center text-white text-xs", children: levels?.[0]?.level || "?" }), _jsx("div", { className: "absolute left-1/2 -translate-x-1/2 z-20 bg-white -mt-3 text-center text-[0.5rem] px-5 [clip-path:polygon(0%_0%,100%_0%,80%_100%,20%_100%)]", children: types?.[0]?.type || "DIGIMON" }), _jsx("div", { className: "absolute left-2/2 -translate-x-1/2 w-20 pt-6 px-2 z-20 bg-white -mt-9 -ml-8 text-right text-md [clip-path:polygon(0%_0%,100%_0%,100%_100%,20%_100%)]", children: _jsx("span", { className: "text-2xl", children: id.toString().padStart(4, "0") }) }), _jsx("img", { src: src, alt: "", className: `w-full absolute mix-blend-multiply z-30 ${isMini ? "p-6 pt-10" : "p-2 pt-6"}` }), _jsx("canvas", { ref: canvasRef, className: `w-full absolute inset-0 z-20 pointer-events-none ${isMini ? "p-6 pt-14" : "p-2 pt-10"}` }), _jsx("canvas", { ref: canvasRef, className: `w-full absolute inset-0 z-20 pointer-events-none ${isMini ? "p-5 pt-11" : "p-1 pt-7"}` }), _jsx("canvas", { ref: canvasParticlesRef, className: "absolute inset-0 z-10 pointer-events-none" })] }) }), _jsxs("div", { className: "p-4 pt-0 text-white", children: [_jsxs("details", { className: "group", children: [_jsxs("summary", { className: "list-none cursor-pointer [&::-webkit-details-marker]:hidden [clip-path:polygon(2%_0%,98%_0%,100%_15%,100%_85%,98%_100%,2%_100%,0%_80%,0%_20%)] group-open:[clip-path:polygon(2%_0%,98%_0%,100%_15%,100%_85%,100%_100%,2%_100%,0%_100%,0%_20%)]", children: [!isMini && (_jsxs("div", { className: "bg-[#1E1510] absolute w-72 z-10 h-8 px-2 mt-2 [clip-path:polygon(0%_0%,8%_0%,15%_100%,0%_70%,70%_70%,100%_70%,100%_100%,5%_100%,0%_95%,0%_5%)]", children: [_jsx("span", { className: "group-open:hidden", children: "\u25B2" }), _jsx("span", { className: "hidden group-open:inline", children: "\u25BC" })] })), _jsx("h2", { className: `bg-gradient-to-r ${fieldSelectedGradiant} ${isMini ? "text-md" : "text-2xl"} w-full text-center pb-1 whitespace-nowrap`, children: name })] }), descriptions && (_jsx("p", { className: "py-2 text-xs bg-[#1E1510] h-24 overflow-y-auto font-normal px-2 [clip-path:polygon(0%_0%,100%_0%,100%_100%,100%_97%,98%_100%,3%_100%,0%_97%,0%_0%)]", children: descriptions.find(((item) => item.language === "en_us"))?.description }))] }), attributes && (_jsx("div", { className: `[clip-path:polygon(2%_0%,98%_0%,100%_15%,100%_85%,98%_100%,2%_100%,0%_80%,0%_20%)] mt-2 px-2 bg-gradient-to-r ${fieldSelectedGradiant}`, children: _jsxs("div", { className: "flex flex-wrap gap-x-2 text-xs py-2", children: [_jsx("h2", { className: "w-full", children: "Attributes" }), attributes.map((item) => (_jsx("div", { children: item.attribute })))] }) })), fields && (_jsx("div", { className: `[clip-path:polygon(2%_0%,98%_0%,100%_5%,100%_95%,98%_100%,2%_100%,0%_95%,0%_5%)] mt-2 px-2 bg-gradient-to-r ${fieldSelectedGradiant}`, children: _jsxs("div", { className: "flex flex-wrap gap-x-2 text-xs py-2 justify-center", children: [_jsx("h2", { className: "w-full", children: "Fields" }), fields.map((item) => (_jsxs("div", { class: "flex items-center gap-2 py-2 w-[45%]", children: [_jsx("img", { src: item.image, alt: "" }), item.field] })))] }) }))] })] }));
};
